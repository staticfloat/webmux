#!/usr/bin/env bash

function decrypted()
{
    [[ -f "$1" ]] && [[ $(head -c 10 "$1") != "GITCRYPT" ]]
}

function resolve_ip()
{
    if [[ "${PLATFORM}" == "Linux" ]]; then
        getent hosts $1 | awk '{ print $1 }'
    elif [[ "${PLATFORM}" == "Darwin" ]]; then
        dscacheutil -q host -a name $1 | grep ip_address | cut -d: -f2 | xargs echo
    fi
}

function get_local_ip()
{
    if [[ $(uname) == "Linux" ]]; then
        ip -o route get to 1.1.1.1 | sed -n 's/.*src \([0-9.]\+\).*/\1/p'
    elif [[ $(uname) == "Darwin" ]]; then
        # We've got python, so just..... just do it.
        python -c 'import socket; s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(("1.1.1.1", 80)); print(s.getsockname()[0])'
    fi
}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PLATFORM="$(uname)"
if [[ -z "${HOSTNAME}" ]]; then
    HOSTNAME=$(hostname -s)-${RANDOM}
fi

# This is the ssh port that you're running sshd on.
if [[ -z "${HOST_PORT}" ]]; then
    for SSH_CONF_FILE in /etc/ssh/sshd_config /etc/sshd_config; do
        HOST_PORT=$(grep -E '^[^#]*Port [0-9]+' $SSH_CONF_FILE 2>/dev/null | awk '{print $2 }')
        if [[ -n "${HOST_PORT}" ]]; then
            break
        fi
    done
    if [[ -z "${HOST_PORT}" ]]; then
        echo "Unable to auto-guess host SSH port; assuming 22..."
        HOST_PORT=22
    fi
fi

WEBMUX_HOST="${WEBMUX_HOST:-webmux.cflo.at}"
WEBMUX_PORT="${WEBMUX_PORT:-2000}"
WEBMUX_IP=$(resolve_ip ${WEBMUX_HOST})
LOCAL_IP=$(get_local_ip)
WEBMUX_SSH_KEY_FILE="${WEBMUX_SSH_KEY_FILE:-${HOME}/etc/secure/ssh/external/webmux_rsa}"
if ! decrypted "${WEBMUX_SSH_KEY_FILE}"; then
    echo "ERROR: Must decrypt webmux key!"
    exit 1
fi
chmod 0600 "${WEBMUX_SSH_KEY_FILE}"

# Remove any previous webmux host keys
echo "Removing old webmux host keys..."
ssh-keygen -R "[${WEBMUX_HOST}]:${WEBMUX_PORT}" >/dev/null 2>/dev/null
ssh-keygen -R "[${WEBMUX_HOST}]" >/dev/null 2>/dev/null
ssh-keygen -R "${WEBMUX_HOST}" >/dev/null 2>/dev/null
ssh-keygen -R "[${WEBMUX_IP}]:${WEBMUX_PORT}" >/dev/null 2>/dev/null
ssh-keygen -R "[${WEBMUX_IP}]" >/dev/null 2>/dev/null
ssh-keygen -R "${WEBMUX_IP}" >/dev/null 2>/dev/null

KEYSCAN="|1|ZOIarPVbtuwYLS0egWYT2aZJ3eY=|EOtpeXA9r8O9vsJZXJS0lGgDujg= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKcp/fVkN8tJ9Ip8xV9b+xPdipB7j0nJy02bfMmWeQ6S09W4fC+eNfF/xAU9AhdMT5F67tANn/cVZFUIOsh03NK742llYuMeEmYv1Df3k+XoVcbJuibSjiHDoZLiaq0IhnIaR7kMZV5tlHG1py0CGeBA6XlUE5QRvVF+HqBmWrbTMqyEiuTH9PlfQ5CbmgcTiABu2h0J32nVow8VTH5UDwDtcL9/NRz9LZkOX7Qo9IYeDe50O+EoIFGKSk8a177SLmYCaEIq3LmVZvXcKfwebDO3a1u/1NxVmcyDRpTSfGDAtEcRj5bifMgzjvPoVoLpjNBIBLoy1F79HCJV5oIH43"
echo "Adding known-good webmux host key..."
KNOWN_HOSTS=$(cat "${HOME}/.ssh/known_hosts")
(echo "${KEYSCAN}"; echo "${KNOWN_HOSTS}") | uniq > "${HOME}/.ssh/known_hosts"

# Find our own SSH fingerprint
FINGERPRINT=$(ssh-keyscan -H -p ${HOST_PORT} -t ssh-rsa localhost 2>&1 | grep 'ssh-rsa' | awk '{ print $3 }')
if [[ -z "${FINGERPRINT}" ]]; then
    echo "ERROR: Could not find own fingerprint!"
    exit 1
fi

function qwhich()
{
    which "$@" 2>/dev/null
}

function get_port_mapping()
{
    JSON_DATA="{\
        \"user\":\"${USER}\", \
        \"hostname\":\"${HOSTNAME}\", \
        \"fingerprint\":\"${FINGERPRINT}\", \
        \"host_port\":\"${HOST_PORT}\", \
        \"local_ip\":\"${LOCAL_IP}\" \
    }"
    curl -# -H "Content-Type: application/json" -X POST -d "${JSON_DATA}" -f -L "https://${WEBMUX_HOST}/register"
}

function update_git_repo()
{
    cd "$SCRIPT_DIR"
    UPDATE_URL=$(git remote get-url updates 2>/dev/null)
    if [[ -z "${UPDATE_URL}" ]]; then
        git remote add updates https://github.com/staticfloat/webmux.git
    fi

    git pull updates master
}

function webmux_reverse_tunnel()
{
    local SSH_OPTS=()
    SSH_PORT="$1"
    MOSH_PORT="$(($1 + 1000))"

    # When this subshell get a sigint, sigterm, returns or exits, call
    # `kill 0` to bring down the whole process tree.
    trap "exit" INT TERM RETURN
    trap "kill 0" EXIT

    # Set keyfile to use to login
    SSH_OPTS+=("-i${WEBMUX_SSH_KEY_FILE/#\~/$HOME}")

    # Tell SSH to quit if it can't start forwarding ports
    SSH_OPTS+=("-o ExitOnForwardFailure=yes")

    # Tell SSH to quit if heartbeats stop working for more than two minutes at a time
    SSH_OPTS+=("-o ServerAliveCountMax=2")
    SSH_OPTS+=("-o ServerAliveInterval=60")

    # Force SSH to use `ssh-rsa` as the host key algorithm
    SSH_OPTS+=("-o HostKeyAlgorithms=ssh-rsa")

    # Create port forwarding for SSH
    SSH_OPTS+=("-R ${SSH_PORT}:localhost:${HOST_PORT}")

    # Operate on the WEBMUX_PORT
    SSH_OPTS+=("-p ${WEBMUX_PORT}")

    # Don't ask for a tty
    SSH_OPTS+=("-N")

    # Put in server address and execute!
    "$(which ssh)" "${SSH_OPTS[@]}" "webmux@${WEBMUX_HOST}"
}

PORT_NUMBER=$(get_port_mapping)
if [[ -z "${PORT_NUMBER}" ]]; then
    echo "ERROR: Could not get port mapping, waiting 10 seconds and trying again..."
    sleep 10
else
    echo "Connecting to claim port ${PORT_NUMBER}..."
    (webmux_reverse_tunnel ${PORT_NUMBER})
    sleep 1
fi

# Always, at the end of all things, git pull the latest and re-exec ourselves
(update_git_repo)
exec "$0"
